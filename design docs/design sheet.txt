---DESIGN SHEET---

---TERMS---
diri          -> direct input
'b            -> bus
@<reg name>   -> registers
#<address>    -> address in RAM
##            -> the value of the current address in RAM
@@1           -> the first register given in the insturction 
@@2           -> the second register given in the insturction
#st           -> stack
>>#st         -> push to stack
#st>>         -> pop stack

---RUNNING PROGRAMS---
The computer only runs programs ending in .hex file extension.
When it starts it will try to run the program with the name "boot.hex" in its current dir.

---CLOCK---
2048hz or 1024hz depending on the emulator and logisim
rising edge  -> fetch
falling edge -> execute


---MEMORY(RAM)---
16bit address
stored in @ma

reserved spaces:
#0x0000:#0xfffe -> free space

stack:
8bit stack pointer
commands -> push, pop
not alowed to change pointer


---PROGRAM MEMORY(ROM)---
32bit address
first 16bits in @pa the last 16bits in @pb


---REGISTERS---
@a   -> accumulator 1                                  -> 0b000
@b   -> accumulator 2                                  -> 0b001
@ao  -> ALU output register(integrated with the ALU)   -> 0b010
@ma  -> RAM memory address                             -> 0b011
@pa  -> ROM memory address(first 16bits)               -> 0b100
@pb  -> ROM memory address(last 16bits)                -> 0b101
@fl  -> flags register                                 -> 0b110
@sp  -> stack pointer                                  -> 0b111


---ALU---
can execute addition, subtraction, multiplication, division and bitwise operations and, or, not
the output is stored in @ao(integrated with the ALU)
the carry, borrow and remainder are stored in the flags register

---MICRO INSTRUCTIONS---
lr   : @@1 -> 'b
im   : diri -> 'b

sr   : 'b -> @@1

lr   : ## -> 'b
sr   : 'b -> ##

in   : @sp += 1
de   : @sp -= 1

ad   : enable +
su   : enable - 
mu   : enable *
di   : enable /
an   : enable &&
or   : enable ||
no   : enable !
cm   : enable = > <

ep   : enable @pa
eq   : enable @pb


---INSTRUCTIONS---
layout:
xxxxxx00 yyyyyyyy yyyyyyyy zzzaaab0

x -> insturction  y -> direct input(diri)  z -> first enabled register(@@1)  a -> second enabled register(@@2)  b->@@/diri

insturctions:
lda   ::  x:00 y:y z:0 a:0 b:b ::  @a -> @@2 
ldb   ::  x:01 y:y z:1 a:1 b:b ::  @b -> @@2
ldo   ::  x:02 y:y z:2 a:2 b:b ::  @ao -> @@2
ldf   ::  x:03 y:y z:6 a:6 b:b ::  @fl -> @@2

sta   ::  x:04 y:y z:0 a:0 b:b ::  @@2/diri -> @a
stb   ::  x:05 y:y z:1 a:1 b:b ::  @@2/diri -> @b

ldra  ::  x:06 y:y z:4 a:a b:b ::  diri -> @ma/@@1, ## -> @@2
stra  ::  x:07 y:y z:4 a:a b:b ::  diri -> @ma/@@1, @@2/diri -> ##

add   ::  x:08 y:y z:z a:a b:b ::  @@1/diri + @@2 -> @ao
sub   ::  x:09 y:y z:z a:a b:b ::  @@1/diri - @@2 -> @ao
mul   ::  x:0a y:y z:z a:a b:b ::  @@1/diri * @@2 -> @ao
div   ::  x:0b y:y z:z a:a b:b ::  @@1/diri / @@2 -> @ao
and   ::  x:0c y:y z:z a:a b:b ::  @@1/diri && @@2 -> @ao
or    ::  x:0d y:y z:z a:a b:b ::  @@1/diri || @@2 -> @ao
not   ::  x:0e y:y z:z a:a b:b ::  !@@1/!diri -> @ao
comp  ::  x:0f y:y z:z a:a b:b ::  @@1/diri<@@2{0x0000 -> @ao}, @@1/diri==@@2{0x0001 -> @ao}, @@1/diri>@@2{0xffff -> @ao}

jmp   ::  x:10 y:y z:z a:a b:b ::  @pa >>#st, @pb >>#st, @@1/diri + -> @pa, @@2 -> @pb 
jpfz  ::  x:11 y:y z:z a:a b:b ::  @fl==0x0000{@pa >>#st, @@1/diri + -> @pa, @@2 -> @pb}
jpaz  ::  x:12 y:y z:4 a:5 b:b ::  @a==0x0000{@pa >>#st, @@1/diri + -> @pa, @@2 -> @pb}

push  ::  x:13 y:y z:z a:a b:b ::  @@1 >>#st 
pop   ::  x:14 y:y z:0 a:a b:b ::  #st>> @@1