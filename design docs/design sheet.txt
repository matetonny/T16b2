---DESIGN SHEET---

---TERMS---
diri          -> direct input
'b            -> bus
@<reg name>   -> registers
#<address>    -> address in RAM
##            -> the value of the current address in RAM
@@1           -> the first register given in the insturction 
@@2           -> the second register given in the insturction 

---CLOCK---
2048hz or 1024hz depending on the emulator and logisim
rising edge  -> fetch
falling edge -> execute


---MEMORY(RAM)---
16bit address
stored in @ma

reserved spaces:
#0000:#ffff -> free space

stack:
8bit stack pointer
commands -> push, pop
not alowed to change pointer


---PROGRAM MEMORY(ROM)---
32bit address
first 16bits in @pa the last 16bits in @pb


---REGISTERS---
@a   -> accumulator 1                                  -> 000
@b   -> accumulator 2                                  -> 001
@ao  -> ALU output register(integrated with the ALU)   -> 010
@ma  -> RAM memory address                             -> 011
@pa  -> ROM memory address(first 16bits)               -> 100
@pb  -> ROM memory address(last 16bits)                -> 101
@fl  -> flags register                                 -> 110
@sp  -> stack pointer                                  -> 111


---ALU---
can execute addition, subtraction, multiplication, division and bitwise operations and, or, not
the output is stored in @ao(integrated with the ALU)
the carry, borrow and remainder are stored in the flags register

---MICRO INSTRUCTIONS---
lr   : @@1 -> 'b
im   : diri -> 'b

sr   : 'b -> @@1

lr   : ## -> 'b
sr   : 'b -> ##

in   : @sp += 1
de   : @sp -= 1

ad   : enable +
su   : enable - 
mu   : enable *
di   : enable /
an   : enable &&
or   : enable ||
no   : enable !


---INSTRUCTIONS---
how an insturction is laid out

xxxxxxyyyyyyyyyyyyyyyyzzzaaab

x -> insturction  y -> direct input(diri)  z -> first enabled register(@@1)  a -> second enabled register(@@2)  b->@@/diri


lda   ::  x:00 y:y z:0 a:a  ::  @a/@@1 -> @@2 
ldb   ::  x:01 y:y z:1 a:a  ::  @b/@@1 -> @@2
ldo   ::  x:02 y:y z:2 a:a  ::  @ao/@@1 -> @@2
ldf   ::  x:03 y:y z:6 a:a  ::  @fl/@@1 -> @@2

sta   ::  x:04 y:y z:0 a:a  ::  @@2/diri -> @a
stb   ::  x:05 y:y z:1 a:a  ::  @@2/diri -> @b

ldra  ::  x:06 y:y z:4 a:a  ::  diri -> @ma/@@1, ## -> @@2
stra  ::  x:07 y:y z:4 a:a  ::  diri -> @ma/@@1, @@2/diri -> ##

add   ::  x:08 y:y z
